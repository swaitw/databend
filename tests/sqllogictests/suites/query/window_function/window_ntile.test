# description: ntile window function test cases
# derived from duckdb's test_ntile.test with some modifications

statement ok
CREATE DATABASE IF NOT EXISTS test_window_ntile

statement ok
USE test_window_ntile

statement ok
DROP TABLE IF EXISTS Scoreboard

statement ok
CREATE TABLE Scoreboard(TeamName VARCHAR, Player VARCHAR, Score INTEGER);

statement ok
INSERT INTO Scoreboard VALUES ('Mongrels', 'Apu', 350);

statement ok
INSERT INTO Scoreboard VALUES ('Mongrels', 'Ned', 666);

statement ok
INSERT INTO Scoreboard VALUES ('Mongrels', 'Meg', 1030);

statement ok
INSERT INTO Scoreboard VALUES ('Mongrels', 'Burns', 1270);

statement ok
INSERT INTO Scoreboard VALUES ('Simpsons', 'Homer', 1);

statement ok
INSERT INTO Scoreboard VALUES ('Simpsons', 'Lisa', 710);

statement ok
INSERT INTO Scoreboard VALUES ('Simpsons', 'Marge', 990);

statement ok
INSERT INTO Scoreboard VALUES ('Simpsons', 'Bart', 2010);

query IIII
SELECT
  TeamName,
  Player,
  Score,
  NTILE(2) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE
FROM ScoreBoard s
ORDER BY TeamName, Score;
----
Mongrels	Apu	350	1
Mongrels	Ned	666	1
Mongrels	Meg	1030	2
Mongrels	Burns	1270	2
Simpsons	Homer	1	1
Simpsons	Lisa	710	1
Simpsons	Marge	990	2
Simpsons	Bart	2010	2

query IIII
SELECT
  TeamName,
  Player,
  Score,
  NTILE(2) OVER (ORDER BY Score ASC) AS NTILE
FROM ScoreBoard s
ORDER BY Score;
----
Simpsons	Homer	1	1
Mongrels	Apu	350	1
Mongrels	Ned	666	1
Simpsons	Lisa	710	1
Simpsons	Marge	990	2
Mongrels	Meg	1030	2
Mongrels	Burns	1270	2
Simpsons	Bart	2010	2

query IIII
SELECT
  TeamName,
  Player,
  Score,
  NTILE(1000) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE
FROM ScoreBoard s
ORDER BY TeamName, Score;
----
Mongrels	Apu	350	1
Mongrels	Ned	666	2
Mongrels	Meg	1030	3
Mongrels	Burns	1270	4
Simpsons	Homer	1	1
Simpsons	Lisa	710	2
Simpsons	Marge	990	3
Simpsons	Bart	2010	4

query IIII
SELECT
  TeamName,
  Player,
  Score,
  NTILE(1) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE
FROM ScoreBoard s
ORDER BY TeamName, Score;
----
Mongrels	Apu	350	1
Mongrels	Ned	666	1
Mongrels	Meg	1030	1
Mongrels	Burns	1270	1
Simpsons	Homer	1	1
Simpsons	Lisa	710	1
Simpsons	Marge	990	1
Simpsons	Bart	2010	1

# incorrect number of parameters for ntile
statement error
SELECT
  TeamName,
  Player,
  Score,
  NTILE() OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE
FROM ScoreBoard s
ORDER BY TeamName, Score;

statement error
SELECT
  TeamName,
  Player,
  Score,
  NTILE(1,2) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE
FROM ScoreBoard s
ORDER BY TeamName, Score;

statement error
SELECT
  TeamName,
  Player,
  Score,
  NTILE(1,2,3) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE
FROM ScoreBoard s
ORDER BY TeamName, Score;

statement error
SELECT
  TeamName,
  Player,
  Score,
  NTILE(1,2,3,4) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE
FROM ScoreBoard s
ORDER BY TeamName, Score;

statement error
SELECT
  TeamName,
  Player,
  Score,
  NTILE(-1) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE
FROM ScoreBoard s
ORDER BY TeamName, Score;

statement error
SELECT
  TeamName,
  Player,
  Score,
  NTILE(0) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE
FROM ScoreBoard s
ORDER BY TeamName, Score;

statement ok
USE default

statement ok
DROP DATABASE test_window_ntile

statement ok
CREATE or REPLACE TABLE t (  id INT NULL,  kind VARCHAR NULL, per FLOAT NULL);

statement ok
INSERT INTO t (id, kind, per) VALUES
(17, 'a', 10.0), (17, 'a', 20.5), (17, 'a', 30.25), (17, 'a', 40.75), (17, 'a', 50.0),
(17, 'a', 60.5), (17, 'a', 70.0), (17, 'a', 80.25), (17, 'a', 90.5), (17, 'a', 100.0),
(17, 'a', 110.75), (17, 'a', 120.5), (17, 'a', 130.0), (17, 'a', 140.25), (17, 'a', 150.5),
(17, 'a', 160.0), (17, 'a', 170.75), (17, 'a', 180.5), (17, 'a', 190.0), (17, 'a', 200.0),
(17, 'a', 210.5), (17, 'a', 220.25), (17, 'a', 230.0), (17, 'a', 240.75), (17, 'a', 250.5),
(17, 'a', 260.0), (17, 'a', 270.0), (17, 'a', 280.5), (17, 'a', 290.0), (17, 'a', 300.0),
(17, 'a', 310.5), (17, 'a', 320.0), (17, 'a', 330.25), (17, 'a', 340.0), (17, 'a', 350.5),
(17, 'a', 360.0), (17, 'a', 370.0), (17, 'a', 380.5), (17, 'a', 390.0), (17, 'a', 400.0),
(17, 'a', 410.75), (17, 'a', 420.5), (17, 'a', 430.0), (17, 'a', 440.25), (17, 'a', 450.5),
(17, 'a', 460.0), (17, 'a', 470.75), (17, 'a', 480.5), (17, 'a', 490.0), (17, 'a', 500.0),
(17, 'a', 510.5), (17, 'a', 520.25), (17, 'a', 530.0), (17, 'a', 540.5), (17, 'a', 550.0),
(17, 'a', 560.0), (17, 'a', 570.5), (17, 'a', 580.0), (17, 'a', 590.25), (17, 'a', 600.0),
(17, 'a', 610.5), (17, 'a', 620.0), (17, 'a', 630.0), (17, 'a', 640.5), (17, 'a', 650.0),
(17, 'a', 660.0), (17, 'a', 670.5), (17, 'a', 680.0), (17, 'a', 690.0), (17, 'a', 700.5),
(17, 'a', 710.0), (17, 'a', 720.0), (17, 'a', 730.5), (17, 'a', 740.0), (17, 'a', 750.25),
(17, 'a', 760.0), (17, 'a', 770.5), (17, 'a', 780.0), (17, 'a', 790.0), (17, 'a', 800.5),
(17, 'a', 810.0), (17, 'a', 820.0), (17, 'a', 830.5), (17, 'a', 840.0), (17, 'a', 850.0),
(17, 'a', 860.5), (17, 'a', 870.0), (17, 'a', 930.0), (17, 'a', 930.0), (17, 'a', 930.0),
(17, 'a', 930.0), (17, 'a', 930.0), (17, 'a', 930.0), (17, 'a', 1000.0), (17, 'a', 1000.0),
(17, 'a', 1000.0), (17, 'a', 1000.0), (17, 'a', 1000.0), (17, 'a', 1000.0), (17, 'a', 1000.0);


query TTTT
SELECT
    COUNT(*), quantile, id, kind
FROM
    (
        SELECT
            id, kind, ntile(10) OVER (ORDER BY per ASC ) AS quantile
        FROM
            (SELECT * FROM t)
    )
GROUP BY
    quantile, id, kind
ORDER BY
    quantile, id, kind;
----
10	1	17	a
10	2	17	a
10	3	17	a
10	4	17	a
10	5	17	a
10	6	17	a
10	7	17	a
10	8	17	a
10	9	17	a
10	10	17	a

query TTTT
SELECT
    COUNT(*), quantile, id, kind
FROM
    (
        SELECT
            id,
            kind,
            ntile(10) OVER (PARTITION BY id, kind ORDER BY per ASC) AS quantile
        FROM
            (SELECT * FROM t)
    )
GROUP BY
    quantile, id, kind
ORDER BY
    quantile, id, kind;
----
10	1	17	a
10	2	17	a
10	3	17	a
10	4	17	a
10	5	17	a
10	6	17	a
10	7	17	a
10	8	17	a
10	9	17	a
10	10	17	a

statement ok
drop table if exists t;
