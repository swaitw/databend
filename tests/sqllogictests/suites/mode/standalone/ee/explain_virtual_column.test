## Copyright 2023 Databend Cloud
##
## Licensed under the Elastic License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     https://www.elastic.co/licensing/elastic-license
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

statement ok
DROP DATABASE IF EXISTS test_virtual_db

statement ok
CREATE DATABASE test_virtual_db

statement ok
USE test_virtual_db

statement ok
drop table if exists t1

statement ok
create table t1 (a int null, v json null) storage_format = 'native'

statement ok
insert into t1 values(1, parse_json('{"a":[1,2,3],"b":{"c":10}}'))

query T
explain select a, v['a'][0], v['b'] from t1
----
EvalScalar
├── output columns: [t1.a (#0), v['a'][0] (#2), v['b'] (#3)]
├── expressions: [get_by_keypath(t1.v (#1), '{"a",0}'), get_by_keypath(t1.v (#1), '{"b"}')]
├── estimated rows: 1.00
└── TableScan
    ├── table: default.test_virtual_db.t1
    ├── output columns: [a (#0), v (#1)]
    ├── read rows: 1
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

query T
explain select a, v['b'] from t1 where v['a'][0] = 1
----
EvalScalar
├── output columns: [t1.a (#0), v['b'] (#2)]
├── expressions: [get_by_keypath(t1.v (#1), '{"b"}')]
├── estimated rows: 0.20
└── TableScan
    ├── table: default.test_virtual_db.t1
    ├── output columns: [a (#0), v (#1)]
    ├── read rows: 1
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [is_true(TRY_CAST(get_by_keypath(t1.v (#1), '{"a",0}') AS UInt8 NULL) = 1)], limit: NONE]
    └── estimated rows: 0.20

statement ok
create virtual column (v['a'][0] as v1, v['b'] as v2) for t1

statement ok
refresh virtual column for t1

query T
explain select a, v['a'][0], v['b'] from t1
----
TableScan
├── table: default.test_virtual_db.t1
├── output columns: [a (#0), v['a'][0] (#2), v['b'] (#3)]
├── read rows: 1
├── read size: < 1 KiB
├── partitions total: 1
├── partitions scanned: 1
├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
├── push downs: [filters: [], limit: NONE]
├── virtual columns: [v['a'][0], v['b']]
└── estimated rows: 1.00

query T
explain select a, v1, v2 from t1
----
TableScan
├── table: default.test_virtual_db.t1
├── output columns: [a (#0), v['a'][0] (#2), v['b'] (#3)]
├── read rows: 1
├── read size: < 1 KiB
├── partitions total: 1
├── partitions scanned: 1
├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
├── push downs: [filters: [], limit: NONE]
├── virtual columns: [v['a'][0], v['b']]
└── estimated rows: 1.00

query T
explain select a, v['a'][0], v['b'][1] from t1
----
TableScan
├── table: default.test_virtual_db.t1
├── output columns: [a (#0), v['a'][0] (#2), v['b'][1] (#3)]
├── read rows: 1
├── read size: < 1 KiB
├── partitions total: 1
├── partitions scanned: 1
├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
├── push downs: [filters: [], limit: NONE]
├── virtual columns: [v['a'][0]]
├── not created virtual columns: [v['b'][1]]
└── estimated rows: 1.00

query T
explain select a, v['b'] from t1 where v['a'][0] = 1
----
TableScan
├── table: default.test_virtual_db.t1
├── output columns: [a (#0), v['b'] (#2)]
├── read rows: 1
├── read size: < 1 KiB
├── partitions total: 1
├── partitions scanned: 1
├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
├── push downs: [filters: [is_true(TRY_CAST(v['a'][0] (#3) AS UInt8 NULL) = 1)], limit: NONE]
├── virtual columns: [v['a'][0], v['b']]
└── estimated rows: 0.00

statement ok
drop table t1

statement ok
drop table if exists t2

statement ok
create table t2 (a int null, v json null) storage_format = 'parquet'

statement ok
insert into t2 values(1, parse_json('{"a":[1,2,3],"b":{"c":10}}'))

query T
explain select a, v['a'][0], v['b'] from t2
----
EvalScalar
├── output columns: [t2.a (#0), v['a'][0] (#2), v['b'] (#3)]
├── expressions: [get_by_keypath(t2.v (#1), '{"a",0}'), get_by_keypath(t2.v (#1), '{"b"}')]
├── estimated rows: 1.00
└── TableScan
    ├── table: default.test_virtual_db.t2
    ├── output columns: [a (#0), v (#1)]
    ├── read rows: 1
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

query T
explain select a, v['b'] from t2 where v['a'][0] = 1
----
EvalScalar
├── output columns: [t2.a (#0), v['b'] (#2)]
├── expressions: [get_by_keypath(t2.v (#1), '{"b"}')]
├── estimated rows: 0.20
└── Filter
    ├── output columns: [t2.a (#0), t2.v (#1)]
    ├── filters: [is_true(TRY_CAST(get_by_keypath(t2.v (#1), '{"a",0}') AS UInt8 NULL) = 1)]
    ├── estimated rows: 0.20
    └── TableScan
        ├── table: default.test_virtual_db.t2
        ├── output columns: [a (#0), v (#1)]
        ├── read rows: 1
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [is_true(TRY_CAST(get_by_keypath(t2.v (#1), '{"a",0}') AS UInt8 NULL) = 1)], limit: NONE]
        └── estimated rows: 1.00

statement ok
create virtual column (v['a'][0] as v1, v['b'] as v2) for t2

statement ok
refresh virtual column for t2

query T
explain select a, v['a'][0], v['b'] from t2
----
TableScan
├── table: default.test_virtual_db.t2
├── output columns: [a (#0), v['a'][0] (#2), v['b'] (#3)]
├── read rows: 1
├── read size: < 1 KiB
├── partitions total: 1
├── partitions scanned: 1
├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
├── push downs: [filters: [], limit: NONE]
├── virtual columns: [v['a'][0], v['b']]
└── estimated rows: 1.00

query T
explain select a, v1, v2 from t2
----
TableScan
├── table: default.test_virtual_db.t2
├── output columns: [a (#0), v['a'][0] (#2), v['b'] (#3)]
├── read rows: 1
├── read size: < 1 KiB
├── partitions total: 1
├── partitions scanned: 1
├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
├── push downs: [filters: [], limit: NONE]
├── virtual columns: [v['a'][0], v['b']]
└── estimated rows: 1.00

query T
explain select a, v['a'][0], v['b'][1] from t2
----
TableScan
├── table: default.test_virtual_db.t2
├── output columns: [a (#0), v['a'][0] (#2), v['b'][1] (#3)]
├── read rows: 1
├── read size: < 1 KiB
├── partitions total: 1
├── partitions scanned: 1
├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
├── push downs: [filters: [], limit: NONE]
├── virtual columns: [v['a'][0]]
├── not created virtual columns: [v['b'][1]]
└── estimated rows: 1.00

query T
explain select a, v['b'] from t2 where v['a'][0] = 2;
----
Filter
├── output columns: [t2.a (#0), t2.v['b'] (#2)]
├── filters: [is_true(TRY_CAST(v['a'][0] (#3) AS UInt8 NULL) = 2)]
├── estimated rows: 0.00
└── TableScan
    ├── table: default.test_virtual_db.t2
    ├── output columns: [a (#0), v['b'] (#2), v['a'][0] (#3)]
    ├── read rows: 1
    ├── read size: < 1 KiB
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
    ├── push downs: [filters: [is_true(TRY_CAST(v['a'][0] (#3) AS UInt8 NULL) = 2)], limit: NONE]
    ├── virtual columns: [v['a'][0], v['b']]
    └── estimated rows: 1.00

statement ok
drop table t2

statement ok
USE default

statement ok
DROP DATABASE IF EXISTS test_virtual_db
